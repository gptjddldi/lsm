name: PR Review

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Check for trigger command
        id: check_trigger
        run: |
          COMMANE_TRIGGER="request review"
          if [[ $(jq .comment.body $GITHUB_EVENT_PATH) == *"$COMMANE_TRIGGER"* ]]; then
            echo "::set-output name=trigger::true"
          else
            echo "::set-output name=trigger::false"
          fi
      - name: Install dependencies
        if: steps.check_trigger.outputs.trigger == 'true'
        run: |
          file $(which curl)
      - name: PR Review
        if: steps.check_trigger.outputs.trigger == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs');

            async function reviewPR() {
              const { data: changedFiles } = await github.rest.pulls.listFiles({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
              });

              const { data: pullRequest } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
              });

              const commit_id = pullRequest.head.sha;
              let changeLog = '';

              for (const file of changedFiles) {
                if (!file.patch) continue;

                changeLog += `File: ${file.filename}\n`;
                const lines = file.patch.split('\n');
                let lineNumber = 0;
                let position = 0;

                for (const line of lines) {
                  if (line.startsWith('@@')) {
                    const match = line.match(/@@ -\d+,?\d* \+(\d+),?\d* @@/);
                    if (match) {
                      lineNumber = parseInt(match[1]) - 1;
                      position = 0;
                    }
                    continue;
                  }

                  position++;

                  if (line.startsWith('+')) {
                    lineNumber++;
                    changeLog += `Added (Line ${lineNumber}): ${line.substring(1)}\n`;
                  } else if (line.startsWith('-')) {
                    changeLog += `Removed (Line ${lineNumber}): ${line.substring(1)}\n`;
                  } else {
                    lineNumber++;
                  }
                }
                changeLog += '\n';
              }

              const payload = {
                  diff: changeLog
              };
              try {
                  const response = await fetch("https://d6c6-121-161-225-36.ngrok-free.app/request_review", {
                    method: 'POST',
                    headers: {
                      'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(payload)
                  });
                  if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                  }
            
                  const result = await response.json();
                  return result;
                } catch (error) {
                  console.error('Error:', error);
                  throw error;
                }
              }

            (async () => {
              try {
                const result = await reviewPR();

                const owner = context.repo.owner;
                const repo = context.repo.repo;
                const pull_number = context.issue.number;
                const commit_id = (await github.rest.pulls.get({
                  owner,
                  repo,
                  pull_number
                })).data.head.sha;

                const { data: changedFiles } = await github.rest.pulls.listFiles({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: context.issue.number,
                });
                console.log(result.message)
                const commentsList = JSON.parse(result.message).comments;

                // 각 코멘트에 대해 리뷰 코멘트를 생성
                for (const comment of commentsList) {
                  const file = changedFiles.find(f => f.filename === comment.path);

                  await github.rest.pulls.createReviewComment({
                    owner: owner,
                    repo: repo,
                    pull_number: pull_number,
                    body: comment.body,
                    path: comment.path,
                    commit_id: commit_id,
                    line: comment.position,
                    side: 'RIGHT'
                  });
                }
              } catch (error) {
                console.error('Error:', error);
              }
            })();
          timeout-minutes: 10